//////////////////////////////////////////////////////////////////////////////////////////////
/*
	FSMTrackBonus State machine
	
	File generated 01/02/2010 at 15:47:37
	
	Do not edit this file directly.
	Use Rapido! by Cedric Guillemet.
	
	Rapido! is licensed under GPLV2. Here is a copy of Rapido! License :
	
	This program is free software; you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation; version 2 of the License.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	
*/
//////////////////////////////////////////////////////////////////////////////////////////////

#ifndef FSMTrackBonus_H__
#define FSMTrackBonus_H__

///////////////////////////////////////////////////////////////////////////////////////////////////

#include "../libbase/ZFSM.h"



///////////////////////////////////////////////////////////////////////////////////////////////////

enum {
Type_ShipTrigger

};

///////////////////////////////////////////////////////////////////////////////////////////////////




/*

*/
typedef struct ShipTrigger
{
ZShip *pShip;
} ShipTrigger;



///////////////////////////////////////////////////////////////////////////////////////////////////

class FSMTrackBonus : public ZFSM
{
public:
	FSMTrackBonus()
	{
		Init();
	}
	
	void Init()
	{
		
		mState = Active;
		EnterActive();	
	}

	//////////////////////////////////////////////////////////////////////////////////////////////
	void Tick(float timeEllapsed);

	//////////////////////////////////////////////////////////////////////////////////////////////
	

	//////////////////////////////////////////////////////////////////////////////////////////////
	void Handle(const ShipTrigger& mes)
{
	switch(mState)
	{
		case Active:
			HandleActive(mes);
			break;
		case NotActive:
			HandleNotActive(mes);
			break;
	}
}



	//////////////////////////////////////////////////////////////////////////////////////////////
public:

	enum STATE
	{
	Active,
NotActive

	};

	//////////////////////////////////////////////////////////////////////////////////////////////
	
	STATE mState;
	int mUnactiveTimer;
ZTransform *mBonusTransform;

	//////////////////////////////////////////////////////////////////////////////////////////////
	
	void SetState(STATE newState)
	{
			switch(mState)
	{
		case Active:
			LeaveActive();
			break;
		case NotActive:
			LeaveNotActive();
			break;
	}
mState = newState;	switch(newState)
	{
		case Active:
			EnterActive();
			break;
		case NotActive:
			EnterNotActive();
			break;
	}
		
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////
	
	inline void TickActive(float timeEllapsed)
{


}
inline void TickNotActive(float timeEllapsed)
{

if (OnTimer(mUnactiveTimer))
{
    RemoveTimer(mUnactiveTimer);
    SetState(Active);
}
}

	
	//////////////////////////////////////////////////////////////////////////////////////////////
	
	inline void EnterActive()
{


}
inline void EnterNotActive()
{

// Set bonus shader change
mBonusTransform->SetVisible(false);
// Create Timer which will tick in 6 seconds
mUnactiveTimer = NewTimer(6.f);
}

	
	//////////////////////////////////////////////////////////////////////////////////////////////
	
	inline void LeaveActive()
{


}
inline void LeaveNotActive()
{

// set active shader
mBonusTransform->SetVisible(true);
}

	
	//////////////////////////////////////////////////////////////////////////////////////////////
	
	void HandleActive(const ShipTrigger& mes)
{
// set bonus to ship

// disable the bonus for now
SetState(NotActive);
}

void HandleNotActive(const ShipTrigger& mes)
{

}


	
	//////////////////////////////////////////////////////////////////////////////////////////////
};

///////////////////////////////////////////////////////////////////////////////////////////////////

inline void FSMTrackBonus::Tick(float timeEllapsed)
{
	ZFSM::Tick(timeEllapsed);
	
		switch(mState)
	{
		case Active:
			TickActive(timeEllapsed);
			break;
		case NotActive:
			TickNotActive(timeEllapsed);
			break;
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////

#endif

