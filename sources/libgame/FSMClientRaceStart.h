//////////////////////////////////////////////////////////////////////////////////////////////
/*
	FSMClientRaceStart State machine
	
	File generated 01/02/2010 at 15:47:37
	
	Do not edit this file directly.
	Use Rapido! by Cedric Guillemet.
	
	Rapido! is licensed under GPLV2. Here is a copy of Rapido! License :
	
	This program is free software; you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation; version 2 of the License.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	
*/
//////////////////////////////////////////////////////////////////////////////////////////////

#ifndef FSMClientRaceStart_H__
#define FSMClientRaceStart_H__

///////////////////////////////////////////////////////////////////////////////////////////////////

#include "libbase/ZFSM.h"

#include "FSMClientClassicRace.h"

///////////////////////////////////////////////////////////////////////////////////////////////////

enum {

};

///////////////////////////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////////////////////////

class FSMClientRaceStart : public ZFSM
{
public:
	FSMClientRaceStart()
	{
		Init();
	}
	
	void Init()
	{
		mGame = NULL;
		mState = Undefined;
		EnterUndefined();	
	}

	//////////////////////////////////////////////////////////////////////////////////////////////
	void Tick(float timeEllapsed);

	//////////////////////////////////////////////////////////////////////////////////////////////
	

	//////////////////////////////////////////////////////////////////////////////////////////////
	

	//////////////////////////////////////////////////////////////////////////////////////////////
public:

	enum STATE
	{
	Count3,
Count2,
Count1,
Go,
Undefined,
SoloPreCountDownTransition

	};

	//////////////////////////////////////////////////////////////////////////////////////////////
	
	STATE mState;
	ZRushGame *mGame;
int mTimerCountDown;
FSMClientClassicRace mFSMClientClassicRace;

	//////////////////////////////////////////////////////////////////////////////////////////////
	
	void SetState(STATE newState)
	{
			switch(mState)
	{
		case Count3:
			LeaveCount3();
			break;
		case Count2:
			LeaveCount2();
			break;
		case Count1:
			LeaveCount1();
			break;
		case Go:
			LeaveGo();
			break;
		case Undefined:
			LeaveUndefined();
			break;
		case SoloPreCountDownTransition:
			LeaveSoloPreCountDownTransition();
			break;
	}
mState = newState;	switch(newState)
	{
		case Count3:
			EnterCount3();
			break;
		case Count2:
			EnterCount2();
			break;
		case Count1:
			EnterCount1();
			break;
		case Go:
			EnterGo();
			break;
		case Undefined:
			EnterUndefined();
			break;
		case SoloPreCountDownTransition:
			EnterSoloPreCountDownTransition();
			break;
	}
		
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////
	
	inline void TickCount3(float timeEllapsed)
{

if (OnTimer(mTimerCountDown))
{
SetState(Count2);
}
}
inline void TickCount2(float timeEllapsed)
{

if (OnTimer(mTimerCountDown))
{
SetState(Count1);
}
}
inline void TickCount1(float timeEllapsed)
{

if (OnTimer(mTimerCountDown))
{
SetState(Go);
}
}
inline void TickGo(float timeEllapsed)
{

mFSMClientClassicRace.Tick(timeEllapsed);
}
inline void TickUndefined(float timeEllapsed)
{


}
inline void TickSoloPreCountDownTransition(float timeEllapsed)
{

if (OnTimer(mTimerCountDown))
{
SetState(Count3);
}
}

	
	//////////////////////////////////////////////////////////////////////////////////////////////
	
	inline void EnterCount3()
{

//sound
//camera motion
gCameraMotion.SetCameraStartupMode(1);

mTimerCountDown = NewTimer(1.f);
}
inline void EnterCount2()
{

gCameraMotion.SetCameraStartupMode(1);

mTimerCountDown = NewTimer(1.f);
}
inline void EnterCount1()
{

gCameraMotion.SetCameraStartupMode(1);

mTimerCountDown = NewTimer(1.f);
}
inline void EnterGo()
{

ZShip *pShip = mGame->GetClientShip();
gCameraMotion.SetCameraPiloting(pShip->GetTransform());
mGame->EnableAllShipsControls();
mGame->EnableLapTimeComputationForEveryShip();
mGame->ShowHUD(true);
mGame->AllowInGameMenu(true);
switch (mGame->GetGameSet().mGameType)
{
case 0: // Raw
break;
case 1:// Classing Race
mFSMClientClassicRace.mGame = mGame;
mFSMClientClassicRace.SetState(FSMClientClassicRace::Racing);
break;
default:
break;
}




}
inline void EnterUndefined()
{


}
inline void EnterSoloPreCountDownTransition()
{

gCameraMotion.SetCameraMapObserver();
mTimerCountDown = NewTimer(5.f);
}

	
	//////////////////////////////////////////////////////////////////////////////////////////////
	
	inline void LeaveCount3()
{

RemoveTimer(mTimerCountDown);
}
inline void LeaveCount2()
{

RemoveTimer(mTimerCountDown);
}
inline void LeaveCount1()
{

RemoveTimer(mTimerCountDown);
}
inline void LeaveGo()
{


}
inline void LeaveUndefined()
{


}
inline void LeaveSoloPreCountDownTransition()
{

RemoveTimer(mTimerCountDown);
}

	
	//////////////////////////////////////////////////////////////////////////////////////////////
	
	
	
	//////////////////////////////////////////////////////////////////////////////////////////////
};

///////////////////////////////////////////////////////////////////////////////////////////////////

inline void FSMClientRaceStart::Tick(float timeEllapsed)
{
	ZFSM::Tick(timeEllapsed);
	
		switch(mState)
	{
		case Count3:
			TickCount3(timeEllapsed);
			break;
		case Count2:
			TickCount2(timeEllapsed);
			break;
		case Count1:
			TickCount1(timeEllapsed);
			break;
		case Go:
			TickGo(timeEllapsed);
			break;
		case Undefined:
			TickUndefined(timeEllapsed);
			break;
		case SoloPreCountDownTransition:
			TickSoloPreCountDownTransition(timeEllapsed);
			break;
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////

#endif

