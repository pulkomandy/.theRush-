///////////////////////////////////////////////////////////////////////////////////////////////////
// Zenith Engine
// File Name : FFxParam.cpp
// Creation : 28/06/2007
// Author : Cedric Guillemet
// Description : 
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "FFx.h"

#include <Cg/cg.h>


//---------------------------------------------------------------------------------
// FFxParam
//---------------------------------------------------------------------------------

FFxParam::FFxParam() :
mCGparam(0)
{
}

FFxParam::FFxParam(const char * aName ) :
mName(aName),
mCGparam(0)
{
}

FFxParam::~FFxParam()
{
}

CGparameter FFxParam::getLeaf(CGparameter param)
{
	while (cgGetNumConnectedToParameters(param))
		param = cgGetConnectedToParameter(param,0);
	return param;
}


//---------------------------------------------------------------------------------
// FFxEffectParam
// This classes manage a new parameter for tweaking an effect.
// In ColladaFX it is similar to cfxNewParam
// The parameter is connected to a vertex/fragment program parameter.
// The user typically modify this parameter instead of directly tweaking the program
// parameter. An effect parameter can be connected to several program parameters and/or
// several passes.
// In practice, the value of this parameter is modified by the selected material using
// the FFxMaterialParam.
//---------------------------------------------------------------------------------

FFxEffectParam::FFxEffectParam() :
mData(0)
{
}

FFxEffectParam::FFxEffectParam(const tstring& aName, const tstring& aSemantic, FFxData* aData) :
FFxParam(aName),
mSemantic(aSemantic),
mData(aData)
{
}

void FFxEffectParam::apply()
{
	if (mData && mCGparam)
		mData->apply(mCGparam);
}


void FFxEffectParam::init(CGcontext aContext)
{
	if (mData)
	{
		mCGparam = cgCreateParameter(aContext, mData->mCGtype);
		if (!mSemantic.Empty())
		{
			cgSetParameterSemantic(mCGparam, mSemantic.c_str());
		}
	}
	//LOG("Init effect param %s %p\n", mName.c_str(), mCGparam);
}

//---------------------------------------------------------------------------------
// FFxParamConnection
// This struct is just a pair of parameter name generated by the exporter to restore
// the connection of some program parameters with global/effect parameters.
// The connection are setup in the initialisation phase of the effect, once all the
// programs and parameters have been loaded
//---------------------------------------------------------------------------------

FFxParamConnection::FFxParamConnection()
{
}

FFxParamConnection::FFxParamConnection(const tstring& aFrom, const tstring &aTo) :
mFrom(aFrom),
mTo(aTo)
{
}

//---------------------------------------------------------------------------------
// FFxSetParam
// This object store a value and a link to a CG program parameter for later assignment
// When apply() is called the output program parameter is updated
//---------------------------------------------------------------------------------
/*
FFxSetParam::FFxSetParam(const tstring& aName, FFxData* aData) :
FFxParam(aName),
mData(aData)
{
}

FFxSetParam::~FFxSetParam()
{
}

void FFxSetParam::init(CGcontext aContext)
{
}

void FFxSetParam::apply()
{
	if (mData && mCGparam)
		mData->apply(mCGparam);
}
*/

